---
title: "DataProcessing"
format: html
editor: visual
---

# Data processing

## Chargement des packages

```{r,warning=FALSE,message=FALSE}
library(tidyverse)
library(stringdist)
library(tidygeocoder)
library(sf)
library(zoo)
```

## Chargement des jeux de données

```{r,warning=FALSE,message=FALSE}
# Jeu de données ECHO_DU_MARCHE
priceGlob <- read_csv("../data/ECHO_DU_MARCHE.csv",locale = locale())

# Suppression des doublons dans la base de données
priceGlob <- unique(priceGlob)

# Jeu de données Contenant les catégories des produits (avec les orthographes approximatifs)
CatProd <- read_csv("../data/CatProduit.csv", locale = locale())

# Jeu de données contenant les produits inexistant dans CatProd
priceGlob <- read_csv("../data/ECHO_DU_MARCHE.csv",locale = locale())

# Chargement du jeu de données contenant les catégories supplémentaires absents dans CatProd
CatProdSupp <- read_delim("../data/CatProduitSupp.csv", delim = ";", locale = locale())

# Changement des noms des colonnes de CatProdSupp pour la jointure
colnames(CatProdSupp) <- c("Categories","Produits")

# Concaténation des jeux de données CatProd et CatProdSupp
CatProd <- bind_rows(CatProd,CatProdSupp)

# Tranformation :
## Transformation de la colonne PRODUITS en miniscule afin de faciliter le matching
priceGlob <- priceGlob |> mutate(PRODUITS=str_to_lower(PRODUITS))
# priceGlob

## Transformation du mois en format date
priceGlob <- priceGlob |> mutate(MOIS=month(DATE,label=TRUE))

## Transformation du mois en format date numérique
priceGlob <- priceGlob |> mutate(MOISNum=month(DATE))
## Transformation de la colonne `Produits` du dataset CatProd en miniscule
CatProd <- CatProd |> mutate(Produits=str_to_lower(Produits))

## Remplacement des prix null dans prix par NA
priceGlob <- priceGlob |> mutate(PRIX=replace(priceGlob$PRIX,which(priceGlob$PRIX==0),NA))

# Remplacement de toutes les occurrences de "SANPEDRO" par "SAN-PEDRO"

priceGlob$VILLE <- gsub("SANPEDRO", "SAN-PEDRO", priceGlob$VILLE)


```

## Transformation des colonnes

La difficulté majeure dans le processus réside dans la correspondance des noms des produits d'un dataset à un autre.\
Ces noms diffèrent dans l'orthograghe. Pour cela nous le faisons en deux étapes:\
- **Matching** : Un matching est fait dans un premier avec les colonnes des datasets au nombre de lignes réduits (ceci afin d'éviter d'étendre l'opération sur les \~ 47 000 lignes du dataset ECHO_MARCHE).\
- **Jointure** : Une jointure finale est faite dans but ramener les correspondances attendues vers le grand jeu de données.\

### Matching :

Nous établissons ici une correspondance entre les produits de `priceGlob(ECHO_DU_MARCHE)` et `CatProd`

## Evalutation de la distance

```{r ,warning=FALSE}

# matrice des distances
# Nous formons la matrice des distances avec la méthode "lcs"
dataMat <- as_tibble(stringdistmatrix(CatProd$Produits,unique(priceGlob$PRODUITS),method ='lcs'))

# Récupération des colonnes produits et catégories du dataset CatProd
test <- bind_cols(CatProd,dataMat)
# head(test)

# Utilisation de `map` order, afin de transformer les colonnes en lignes et opérer sur elles
# (1) Voir d'abord : map(test[-1],\(x) order(x)[1])
# Puck(1,y), pour appeler la ligne y de la colonne 1
resultCat <- map(test[-c(1,2)],\(x) order(x)[1]) |>
  map(\(y) test |>
        pluck(1,y))
# Puck(1,y), pour appeler la ligne y de la colonne 2
resultProd <- map(test[-c(1,2)],\(x) order(x)[1])|>
  map(\(y) test |>
        pluck(2,y))

# Affectation des noms des produits
names(resultCat) <- unique(priceGlob$PRODUITS)
names(resultProd) <- unique(priceGlob$PRODUITS)

# Transformation des listes resultMap et resultMapCol en tibble moyennant un pivotement

resultCat <- resultCat |> as_tibble() |>
  pivot_longer(everything(),names_to="Produit", values_to = "Categories")

resultProd <- resultProd |> as_tibble() |>
  pivot_longer(everything(),names_to="Produit", values_to = "MatchProduit")

# Formation du dataset : CatGlob , qui correspond contient les produits et leurs catégories
# Nous retirons le produits afin [-1] afin d'éviter les répétitions dans les colonnes
CatGlob<- bind_cols(resultCat,resultProd[-1])

CatProd <- bind_rows(CatProd,CatProdSupp)
# head(CatProd)


```

### Jointure

L'inclusion de la colonne catégorie dans le dataset`priceGlob`, se fait au moyen de jointure. La jointure se fera ici avec le dataset `CatGlob`

```{r,warning=FALSE}
# Retrait de la colonne matchingProduit dans la jointure
priceGlob <- left_join(priceGlob,CatGlob[-3], by=join_by("PRODUITS"=="Produit"),keep = FALSE)

# Nom des colonnes
namesCol <- colnames(priceGlob)

# Changement de nom de la colonne `catégories`
colnames(priceGlob)<- c(namesCol[1:(length(namesCol)-1)],"SPECIFICITE")

# Creating a tibble
priceGlob_visuel <- tibble(
  PRODUITS = priceGlob$PRODUITS,
  DATE = priceGlob$DATE,
  VILLE = priceGlob$VILLE,
  PRIX = priceGlob$PRIX
)

# Pivot to wide format
priceGlob_visuel <- priceGlob_visuel %>%
  pivot_wider(names_from = VILLE, values_from = PRIX)

# Specify the cities for extraction
cities <- c("ABIDJAN", "SAN-PEDRO", "BOUAKE", "YAMOUSSOUKRO", "MAN", "KORHOGO")

# Loop through each city and extract the first number from each element in the corresponding column
for (city in cities) {
  priceGlob_visuel[[city]] <- as.numeric(str_extract(priceGlob_visuel[[city]], "\\d+"))
}



print(priceGlob_visuel)


```

### Gestion des valeurs manquantes

Deux cas de figures s'assimilent à l'observation de valeurs manquantes dans notre dataset:\
1. Une indisponibilité du produits dans la région concernée\
2. Un défaut de mesure des prix sur la période concernée\

Par suit, le cas 2 sera considéré.

#### Imputations

Le prix absent est imputé à travers le prix observé chez la ville la plus proche. Un prix absent dans toutes les régions de base, est considéré comme une indisponibilité du produit sur la période observée.

**Récupération de la géolocalisation des villes**

```{r,warning=FALSE}
region <- unique(priceGlob$VILLE) |> as_tibble()
region$value[2] <- "SAN-PEDRO"
region <- region |> mutate(pays = "Cote d'Ivoire")
# region

adressRegion <- geocode(region,city = value, country = pays)
# adressRegion

adressRegionGeo <- adressRegion |> st_as_sf(coords = c("long","lat")) |> st_set_crs(4326)

# Distance les plus proches
centro <- st_centroid(adressRegionGeo$geometry) 
# centro

#Matrice des distances entre ville
DD <- st_distance(centro,centro,which = "Great Circle")
# DD

matching <- apply(DD, 2, function(x) {
  ordered_index <- order(x)
  region$value[ordered_index]  # obtenir les noms des villes
}) |> as_tibble()
# matching

names(matching) <- region$value
# Suppression de la première ligne du dataset contenant : distance(ville1,ville1)
matching <- matching[-1, ]
# matching
```

**Imputations**

```{r,warning=FALSE}
# Villes de base
cities <- c("ABIDJAN", "SAN-PEDRO", "BOUAKE", "YAMOUSSOUKRO", "MAN", "KORHOGO")
priceGlob_visuel_m <- as.tibble(priceGlob_visuel)

for (ville in cities) {
  # Parcourir chaque ligne de données
  for (i in 1:nrow(priceGlob_visuel_m)) {
    # Vérifier si le prix à la ville est NA
    if (is.na(priceGlob_visuel_m[[ville]][i])) {
      # Trouver la ville la plus proche avec un prix non nul
      for (ville_proche in matching[[ville]]) {
        # Vérifier si la ville proche existe dans priceGlob_visuel_m et si son prix n'est pas NA
        if (!is.null(priceGlob_visuel_m[[ville_proche]]) && !is.na(priceGlob_visuel_m[[ville_proche]][i])) {
          priceGlob_visuel_m[[ville]][i] <- priceGlob_visuel_m[[ville_proche]][i]
          break
        } else {
          priceGlob_visuel_m[[ville]][i] <- NA
        }
      }
    }
  }
}

# priceGlob_visuel_m

```

## Traitement des données géographiques

Les prix initialement capturés sur 6 villes de la côte d'ivoire, sont à présent repartis sur tout l'ensemble du territoire ivoirien. il ne s'agira pas seulement des prix, mais de tout indicateur calculé dans la perspertive de l'analyse. Pour cela la correspondance de chaque ville par rapport à sa ville la plus proche est alors appliquée.Environ 3658600 en tout seront générées dans un nouveau dataset.

```{r}
dpt <- sf::read_sf("../data/civ")

# Géolocalisation des villes de bases
region <- unique(priceGlob$VILLE) |> as_tibble()
region$value[2] <- "SAN-PEDRO"
region <- region |> mutate(pays = "Cote d'Ivoire")
adressRegion <- geocode(region,city = value, country = pays)

# Ajout de l'attribut geometry
adressRegionGeo <- adressRegion |> st_as_sf(coords = c("long","lat")) |> st_set_crs(4326)

# Les centroïdes des villes de bases
centroVilleBase <- st_centroid(adressRegionGeo$geometry)

# centroïdes des villes de la côte d'ivoire
centroVilleEntiere <- st_centroid(dpt$geometry)

# Estimation des distances entre les villes de la côte d'ivoire et les villes de base
MatriceDistance <- st_distance(centroVilleEntiere,centroVilleBase,which = "Great Circle")

# Ville du pays et la ville de base la plus proche
VillePaysVilleProche <- MatriceDistance  |>
  apply(1,order)|> 
  t() |> 
  as_tibble()|>
  select(V1) |> 
  mutate(VillePays=dpt$ADM3_FR,VilleProche=map_chr(V1,~region$value[.x])) |> select(2:3)

# Jointure avec la base de données sf des villes de la côte d'ivoire
dpt2 <- left_join(dpt,VillePaysVilleProche,join_by(ADM3_FR==VillePays))
dpt2
```



# Calcul des indicateurs

Trois indicateurs feront l'objet d'analyse dans un premier temps. Il s'agit entre autre de:
- Le prix moyen
- Le taux de variation moyen;
- Le taux de variation moyen en valeur absolue.

## Format initial du dataset
```{r}
# pivotement du dataset
priceGlobClean <- priceGlob_visuel_m |>
  pivot_longer(!(PRODUITS:DATE),
               names_to = "VILLE",
               values_to = "PRIX")

# Jointure au dataset initial
priceGlobCleanFull <- left_join(priceGlob |>
                                  select(c(MOIS:VILLE,MOISNum, SPECIFICITE)),
                                priceGlobClean,
                                join_by(PRODUITS,DATE,VILLE)
                                )
```

## Variation des prix par (Dimension)
Le calcul de ces indicateurs sur les autres axes pourra être obtenu moyennant un changement d'axe d'analyse (Date, Ville, Produits etc.)
```{r}
# A une date pour un produit un seul prix est défini
# Dataset de base
priceGlobCleanFull <- priceGlobCleanFull |>
  group_by(PRODUITS,VILLE) |>
  mutate(PRIXPREC=lag(PRIX,order_by = DATE)) # Dataset de base

  # Indicateur
priceGlobCleanFull |>
  filter(CATEGORIE!="PRODUITS MANUFACTURES") |>
  mutate(MoisAn=as.yearmon(DATE, "%m/%Y"),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         ANNEE=as.character(ANNEE),
         ) |>
  group_by(MOIS,ANNEE) |>
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE))
priceGlobCleanFull


```
```{r}
library(leaflet)
library(dplyr)
#Carte 1
adressRegion
priceGlobCleanFull <- priceGlobCleanFull |>
  group_by(PRODUITS,VILLE) |>
  mutate(PRIXPREC=lag(PRIX,order_by = DATE)) # Dataset de base
priceGlobCleanFull
  # Indicateur
indicateurs <- priceGlobCleanFull |>
  filter(CATEGORIE!="PRODUITS MANUFACTURES" & SPECIFICITE!="PRODUITS LAITIERS" & SPECIFICITE!="SUCRES") |>
  mutate(MoisAn=as.yearmon(DATE, "%m/%Y"),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         ANNEE=as.character(ANNEE),
         ) |>
  group_by(VILLE,CATEGORIE,SPECIFICITE,PRODUITS) |>
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE))
indicateurs

############
indicateurs2 <- priceGlobCleanFull |>
  filter(CATEGORIE!="PRODUITS MANUFACTURES" & SPECIFICITE!="PRODUITS LAITIERS" & SPECIFICITE!="SUCRES") |>
  mutate(MoisAn=as.yearmon(DATE, "%m/%Y"),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         ANNEE=as.character(ANNEE),
         ) |>
  group_by(VILLE,SPECIFICITE,PRODUITS) |>
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE))

# Filtrer les données pour les villes où VarMoyAbs est la plus petite
indicateurs <- left_join(indicateurs2,adressRegion, by=c("VILLE"="value"))
indicateurs
villes_min_VarMoy <- indicateurs|>
  group_by(VILLE,SPECIFICITE) |>
  mutate(rank=min_rank(VarMoy))|>
  filter(rank==1)|>
  distinct(PRODUITS,.keep_all=TRUE)
```

```{r}
villes_min_VarMoy
# Agréger les spécificités par ville
villes_agg <- villes_min_VarMoy %>%
  group_by(VILLE) %>%
  slice_min(PrixMoy, with_ties = FALSE) %>%
  ungroup()

villes_agg
# Définir une palette de couleurs
palette_couleurs <- rainbow(length(unique(villes_agg$VILLE)))

# Créer une carte Leaflet
carte <- leaflet() %>%
  addProviderTiles("OpenStreetMap.Mapnik") %>%
  addPolygons(data = dpt2,
              stroke = FALSE,
              color = palette_couleurs[match(dpt2$VilleProche, villes_agg$VILLE)]) %>%
  addMarkers(data = villes_agg,
                   lng = ~long,
                   lat = ~lat,
                   popup = ~paste(VILLE, "<br>SPECIFICITE: ", SPECIFICITE),
                   )%>%
  addLegend(position = "bottomright", 
             colors = palette_couleurs, 
             labels = unique(villes_agg$VILLE),
             title = "Villes")

# Afficher la carte
carte
```

```{r}
indicateurs_recap<- priceGlobCleanFull |>
  filter(CATEGORIE!="PRODUITS MANUFACTURES" & SPECIFICITE!="PRODUITS LAITIERS" & SPECIFICITE!="SUCRES") |>
  mutate(MoisAn=as.yearmon(DATE, "%m/%Y"),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         ANNEE=as.character(ANNEE)
  ) |>
  group_by(VILLE) |>
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE))

indicateurs_recap <- left_join(indicateurs_recap,adressRegion, by=c("VILLE"="value"))
indicateurs_recap[,"PrixMoy"]

# Charger les bibliothèques nécessaires
library(leaflet)
library(dplyr)
library(sp)

# Les données des villes


dpt1<- left_join(dpt2, indicateurs_recap, by = c("VilleProche" = "VILLE"))
# Créer une fonction pour assigner les couleurs selon le prix moyen
pal <- colorNumeric(
  palette = "YlOrRd",
  domain = indicateurs$PrixMoy,
  na.color = "transparent"
)
pal 

# Créer la carte leaflet
leaflet(dpt1) %>%
  addProviderTiles("OpenStreetMap") %>%
  addPolygons(
    fillColor = ~pal(PrixMoy),
    weight = 2,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlight = highlightOptions(
      weight = 5,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = ~paste0(PrixMoy),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  addMarkers(
    data = indicateurs_recap,
    lng = ~long,
    lat = ~lat,
    popup = ~paste0("<strong>", VILLE, "</strong><br>Prix Moy: ", PrixMoy),
    
  ) %>%
  addLegend(
    pal = pal,
    values = indicateurs_recap$PrixMoy,
    opacity = 0.7,
    title = "Prix Moyens",
    position = "bottomright"
  )

```

