---
title: "DataProcessing1"
format: html
editor: visual
---

# Data processing

## Chargement des packages

```{r,warning=FALSE,message=FALSE}
library(tidyverse)
library(stringdist)
library(tidygeocoder)
library(sf)
library(zoo)
```

## Chargement des jeux de données

```{r,warning=FALSE,message=FALSE}
# Jeu de données ECHO_DU_MARCHE
priceGlob <- read_csv("../data/ECHO_DU_MARCHE.csv",locale = locale())

# Suppression des doublons dans la base de données
priceGlob <- unique(priceGlob)

# Jeu de données Contenant les catégories des produits (avec les orthographes approximatifs)
CatProd <- read_csv("../data/CatProduit.csv", locale = locale())

# Jeu de données contenant les produits inexistant dans CatProd
priceGlob <- read_csv("../data/ECHO_DU_MARCHE.csv",locale = locale())

# Chargement du jeu de données contenant les catégories supplémentaires absents dans CatProd
CatProdSupp <- read_delim("../data/CatProduitSupp.csv", delim = ";", locale = locale())

# Changement des noms des colonnes de CatProdSupp pour la jointure
colnames(CatProdSupp) <- c("Categories","Produits")

# Concaténation des jeux de données CatProd et CatProdSupp
CatProd <- bind_rows(CatProd,CatProdSupp)

# Tranformation :
## Transformation de la colonne PRODUITS en miniscule afin de faciliter le matching
priceGlob <- priceGlob |> mutate(PRODUITS=str_to_lower(PRODUITS))
# priceGlob

## Transformation du mois en format date
priceGlob <- priceGlob |> mutate(MOIS=month(DATE,label=TRUE))

## Transformation du mois en format date numérique
priceGlob <- priceGlob |> mutate(MOISNum=month(DATE))
## Transformation de la colonne `Produits` du dataset CatProd en miniscule
CatProd <- CatProd |> mutate(Produits=str_to_lower(Produits))

## Remplacement des prix null dans prix par NA
priceGlob <- priceGlob |> mutate(PRIX=replace(priceGlob$PRIX,which(priceGlob$PRIX==0),NA))

## Remplacement de toutes les occurrences de "SANPEDRO" par "SAN-PEDRO"
priceGlob$VILLE <- gsub("SANPEDRO", "SAN-PEDRO", priceGlob$VILLE)

```

## Transformation des colonnes

La difficulté majeure dans le processus réside dans la correspondance des noms des produits d'un dataset à un autre.\
Ces noms diffèrent dans l'orthograghe. Pour cela nous le faisons en deux étapes:\
- **Matching** : Un matching est fait dans un premier avec les colonnes des datasets au nombre de lignes réduits (ceci afin d'éviter d'étendre l'opération sur les \~ 47 000 lignes du dataset ECHO_MARCHE).\
- **Jointure** : Une jointure finale est faite dans but ramener les correspondances attendues vers le grand jeu de données.\

### Matching :

Nous établissons ici une correspondance entre les produits de `priceGlob(ECHO_DU_MARCHE)` et `CatProd`

## Evalutation de la distance

```{r ,warning=FALSE}

# matrice des distances
# Nous formons la matrice des distances avec la méthode "lcs"
dataMat <- as_tibble(stringdistmatrix(CatProd$Produits,unique(priceGlob$PRODUITS),method ='lcs'))

# Récupération des colonnes produits et catégories du dataset CatProd
test <- bind_cols(CatProd,dataMat)
# head(test)

# Utilisation de `map` order, afin de transformer les colonnes en lignes et opérer sur elles
# (1) Voir d'abord : map(test[-1],\(x) order(x)[1])
# Puck(1,y), pour appeler la ligne y de la colonne 1
resultCat <- map(test[-c(1,2)],\(x) order(x)[1]) |>
  map(\(y) test |>
        pluck(1,y))
# Puck(1,y), pour appeler la ligne y de la colonne 2
resultProd <- map(test[-c(1,2)],\(x) order(x)[1])|>
  map(\(y) test |>
        pluck(2,y))

# Affectation des noms des produits
names(resultCat) <- unique(priceGlob$PRODUITS)
names(resultProd) <- unique(priceGlob$PRODUITS)

# Transformation des listes resultMap et resultMapCol en tibble moyennant un pivotement

resultCat <- resultCat |> as_tibble() |>
  pivot_longer(everything(),names_to="Produit", values_to = "Categories")

resultProd <- resultProd |> as_tibble() |>
  pivot_longer(everything(),names_to="Produit", values_to = "MatchProduit")

# Formation du dataset : CatGlob , qui correspond contient les produits et leurs catégories
# Nous retirons le produits afin [-1] afin d'éviter les répétitions dans les colonnes
CatGlob<- bind_cols(resultCat,resultProd[-1])

CatProd <- bind_rows(CatProd,CatProdSupp)
head(CatProd)


```

### Jointure

L'inclusion de la colonne catégorie dans le dataset`priceGlob`, se fait au moyen de jointure. La jointure se fera ici avec le dataset `CatGlob`

```{r}
# Retrait de la colonne matchingProduit dans la jointure
priceGlob <- left_join(priceGlob,CatGlob[-3], by=join_by("PRODUITS"=="Produit"),keep = FALSE)

# Nom des colonnes
namesCol <- colnames(priceGlob)

# Changement de nom de la colonne `catégories`
colnames(priceGlob)<- c(namesCol[1:(length(namesCol)-1)],"SPECIFICITE")


######### Code Bah à améliorer

# Creating a tibble
priceGlob_visuel <- tibble(
  PRODUITS = priceGlob$PRODUITS,
  DATE = priceGlob$DATE,
  VILLE = priceGlob$VILLE,
  PRIX = priceGlob$PRIX
)
# Pivot to wide format
priceGlob_visuel <- priceGlob_visuel |> 
  pivot_wider(names_from = VILLE, values_from = PRIX)

# Specify the cities for extraction
cities <- c("ABIDJAN", "SAN-PEDRO", "BOUAKE", "YAMOUSSOUKRO", "MAN", "KORHOGO")

for (city in cities) {
  priceGlob_visuel[[city]] <- as.numeric(str_extract(priceGlob_visuel[[city]], "\\d+"))
}



# Résultat
priceGlob

```

### Gestion des valeurs manquantes

Deux cas de figures s'assimilent à l'observation de valeurs manquantes dans notre dataset:\
1. Une indisponibilité du produits dans la région concernée\
2. Un défaut de mesure des prix sur la période concernée\

Par suite nous considérons le cas 2.

#### Imputations

Pour chaque valeur manquante dans une région, une imputation par un arbitrage. D'un côté par l'imputation du prix observé chez la ville la plus proche, et de l'autre par le prix observé aux semaines qui environnent l'obervation de la valeur manquante.

##### Détection des villes les plus proches

Les villes aux prix manquants sur une période sont retrouvées dans un premier temps, puis ces valeurs manquantes sont imputées par la moyenne des valeurs observées dans les autres villes.

```{r}
region <- unique(priceGlob$VILLE) |> as_tibble()

adressRegion <- region |> geocode(value)

adressRegionGeo <- adressRegion |> st_as_sf(coords = c("long","lat")) |> st_set_crs(4326)

# Distance les plus proches
centro <- st_centroid(adressRegionGeo$geometry) 

DD <- st_distance(centro,centro,which = "Frechet")

matching <- apply(DD,2 ,order) |> as_tibble() |> slice(2) |> map(~ region |> pluck(1,.x))

names(matching) <- region$value

# matching
```

**Récupération de la géolocalisation des villes**

```{r,warning=FALSE}
region <- unique(priceGlob$VILLE) |> as_tibble()
region$value[2] <- "SAN-PEDRO"
region <- region |> mutate(pays = "Cote d'Ivoire")
# region

adressRegion <- geocode(region,city = value, country = pays)
# adressRegion

adressRegionGeo <- adressRegion |> st_as_sf(coords = c("long","lat")) |> st_set_crs(4326)

# Distance les plus proches
centro <- st_centroid(adressRegionGeo$geometry) 
# centro

# Matrice des distances entre ville
DD <- st_distance(centro,centro,which = "Great Circle")
# DD

matching <- apply(DD, 2, function(x) {
  ordered_index <- order(x)
  region$value[ordered_index]  # obtenir les noms des villes
}) |> as_tibble()
# matching

names(matching) <- region$value
# Suppression de la première ligne du dataset contenant : distance(ville1,ville1)
matching <- matching[-1, ]
# matching
```

**Imputations**

```{r,warning=FALSE}
# Villes de base
cities <- c("ABIDJAN", "SAN-PEDRO", "BOUAKE", "YAMOUSSOUKRO", "MAN", "KORHOGO")

#
priceGlob_visuel_m <- as.tibble(priceGlob_visuel)

for (ville in cities) {
  # Parcourir chaque ligne de données
  for (i in 1:nrow(priceGlob_visuel_m)) {
    # Vérifier si le prix à la ville est NA
    if (is.na(priceGlob_visuel_m[[ville]][i])) {
      # Trouver la ville la plus proche avec un prix non nul
      for (ville_proche in matching[[ville]]) {
        # Vérifier si la ville proche existe dans priceGlob_visuel_m et si son prix n'est pas NA
        if (!is.null(priceGlob_visuel_m[[ville_proche]]) && !is.na(priceGlob_visuel_m[[ville_proche]][i])) {
          priceGlob_visuel_m[[ville]][i] <- priceGlob_visuel_m[[ville_proche]][i]
          break
        } else {
          priceGlob_visuel_m[[ville]][i] <- NA
        }
      }
    }
  }
}

# priceGlob_visuel_m

```

## Traitement des données géographiques

Les prix initialement capturés sur 6 villes de la côte d'ivoire, sont à présent repartis sur tout l'ensemble du territoire ivoirien. il ne s'agira pas seulement des prix, mais de tout indicateur calculé dans la perspertive de l'analyse. Pour cela la correspondance de chaque ville par rapport à sa ville la plus proche est alors appliquée.Environ 3658600 en tout seront générées dans un nouveau dataset.

```{r}
# Chargement des données géographique de la Côte d'Ivoire
dpt <- sf::read_sf("../data/civ")

# region: Régions de bases; adressRegion:Adresse des régions de bases

# Ajout de l'attribut geometry adressRegion:Adresse des régions de bases
adressRegionGeo <- adressRegion |> st_as_sf(coords = c("long","lat")) |> st_set_crs(4326)

# Les centroïdes des villes de bases
centroVilleBase <- st_centroid(adressRegionGeo$geometry)

# centroïdes des villes de la côte d'ivoire
centroVilleEntiere <- st_centroid(dpt$geometry)

# Estimation des distances entre les villes de la côte d'ivoire et les villes de base
MatriceDistance <- st_distance(centroVilleEntiere,centroVilleBase,which = "Great Circle")

# Ville du pays et la ville de base la plus proche
VillePaysVilleProche <- MatriceDistance  |>
  apply(1,order)|> 
  t() |> 
  as_tibble()|>
  select(V1) |> 
  mutate(VillePays=dpt$ADM3_FR,VilleProche=map_chr(V1,~region$value[.x])) |> select(2:3)

# Jointure avec la base de données sf des villes de la côte d'ivoire
dpt2 <- left_join(dpt,VillePaysVilleProche,join_by(ADM3_FR==VillePays))
dpt2
```

# Calcul des indicateurs

Trois indicateurs feront l'objet d'analyse dans un premier temps. Il s'agit entre autre de: - Taux de variation du prix par date; - Taux de variation moyen; - Taux de variation moyen en valeur absolue; - Prix du panier moyen (\*).

## Format initial du dataset

```{r}
# pivotement du dataset
priceGlobClean <- priceGlob_visuel_m |>
  pivot_longer(!(PRODUITS:DATE),
               names_to = "VILLE",
               values_to = "PRIX")

# Jointure au dataset initial
priceGlobCleanFull <- left_join(priceGlob |>
                                  select(c(MOIS:VILLE,MOISNum,SPECIFICITE)),
                                priceGlobClean,
                                join_by(PRODUITS,DATE,VILLE)
                                )
```

## Variation des prix par (Dimension)

```{r}
# A une date pour un produit un seul prix est défini
# Dataset de base
priceGlobCleanFull <- priceGlobCleanFull |>
  group_by(PRODUITS,VILLE) |>
  mutate(PRIXPREC=lag(PRIX,order_by = DATE)) # Dataset de base
  # Indicateur
priceGlobCleanFull |>
  filter(CATEGORIE!="PRODUITS MANUFACTURES") |>
  mutate(MoisAn=as.yearmon(DATE, "%m/%Y"),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         ANNEE=as.character(ANNEE),
         ) |>
  group_by(MOIS,ANNEE) |>
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE)) |> 
  ## Plot
  ggplot()+
  aes(x=MOIS,y=PrixMoy,color=ANNEE)+
  geom_point()+
  geom_line()+
  theme_minimal()
```

## Exportation

Nous exportons les données transformer afin d'en faire la visualisation dans l'application shiny.

```{r}
# write.csv(priceGlobCleanFull, "priceGlobCleanFull.csv", row.names = FALSE)
```

dygraph

Fonction pour l'annotation

```{r}
addShadNot <- function(dygraph,tabl){
  
  # Initialisation des variables
  dateDebutInit <- tabl |> pluck(1,1)
  dateFinInit <- tabl |> pluck(2,1)
  dateMil <- tabl |> pluck(6,1)
  dateQuarter <- tabl |> pluck(4,1)
  textAbrev <- tabl |> pluck(7,1) |> substr(1,5)
  textFull <- tabl |> pluck(7,1) |> substr(1,5)
  
  
  obj <- dygraph |> dyShading(from =dateDebutInit, to = dateFinInit,color = "#CCEBD6")
  obj <- obj |> dyAnnotation(dateMil,
                               text = textAbrev,
                               tooltip = str_c("les ",
                                               textFull,
                                               "S sont plus accessibles \n au ",
                                               dateQuarter),
                               attachAtBottom = TRUE,
                               width = 40)
  
  for (i in 2:dim(tabl)[1]){
    # Ensemble de couleur
    color = c("#FFE6E6","#CCEBD6")
    # choix de la couleur
    color =color[c(i%%2==0,i%%2==1)]
    
    # Récupération des dates de débuts et de fin
    dateDebutInit <- tabl |> pluck(1,i)
    dateFinInit <- tabl |> pluck(2,i)
    dateMil <- tabl |> pluck(6,i)
    dateQuarter <- tabl |> pluck(4,i)
    textAbrev <- tabl |> pluck(7,i) |> substr(1,5)
    textFull <- tabl |> pluck(7,i)
    
    # Add shading
    obj <- obj |> dyShading(from = dateDebutInit, to = dateFinInit,color = color)
    
    # Add notation
    obj <- obj |> dyAnnotation(dateMil,
                               text = textAbrev,
                               tooltip = str_c("les ",
                                               textFull,
                                               "S sont plus accessibles \n au ",
                                               dateQuarter),
                               attachAtBottom = TRUE,
                               width = 40)
  }
  return(obj)
}

addMinMax <- function(dygraph,tbl){
  dateMin <- tbl |> pluck(1,1) |> as.character()
  dateMax <- tbl |> pluck(1,2) |> as.character()
  obj <- dygraph |> 
    dyAnnotation(dateMin, text = "Min", tooltip = "Prix moyen minimum",width = 30) |> 
    dyAnnotation(dateMax, text = "Max", tooltip = "Prix moyen maximum",width = 30)
  return(obj)
}

```

```{r}
library(dygraphs)
priceGlobCleanFull |>
  # filter(ANNEE==2020) |>
  mutate(MoisAn=as.yearmon(DATE),
         QuarterAn=as.yearqtr(DATE),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         
         ) |>
  group_by(DATE) |> 
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE)) |> 
  select(DATE,PrixMoy) |> 
  dygraph() |> 
  addShadNot(ranKTable)
  
  
```

Affichage du classement des produits et catégories

```{r}
priceGlobCleanFull |>
  # filter(ANNEE==2020) |>
  filter(CATEGORIE!="PRODUITS MANUFACTURES") |>
  mutate(MoisAn=as.yearmon(DATE),
         QuarterAn=as.yearqtr(DATE),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         ) |>
  group_by(ANNEE,QuarterAn,`SOUS-CATEGORIE`) |> 
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE)) |> 
  mutate(Rank=min_rank(VarMoy)) |>
  filter(Rank==1)|> 
  ungroup() |>
  distinct(QuarterAn,.keep_all=TRUE)


```

Les saisons et leur périodes

```{r}
SemestreTable <- tibble(
  debut=c("2020-1-1","2020-4-1","2020-7-1","2020-10-1",
          "2021-1-1","2021-4-1","2021-7-1","2021-10-1",
          "2022-1-1","2022-4-1","2022-7-1","2022-10-1"
          ),
  fin=c("2020-3-31","2020-6-30","2020-9-30","2020-12-31",
        "2021-3-31","2021-6-30","2021-9-30","2021-12-31",
        "2022-3-31","2022-6-30","2022-9-30","2022-12-31"
        )
  )


```

Afin de retrouver les dates du dataset qui sont plus proches des dates du milieu

```{r}
# Fonction pour trouver la date la plus proche dans vecB pour une date donnée
find_closest_date <- function(date, vec) {
  closest_date <- vec[which.min(abs(vec - date))]
  return(closest_date)
}

SemestreTable <- SemestreTable |> 
  mutate(Date=as.Date(fin)) |>
  mutate(Quarter=as.yearqtr(Date),
         DateMil=Date %m-% months(1),
         DateMilFind= sapply(DateMil,
                             function(date) find_closest_date(date, priceGlobCleanFull$DATE))|>
           as.Date()
         )

SemestreTable

```

# récupération du classement des produits

```{r}
indicateur <- priceGlobCleanFull |>
  # filter(ANNEE==2020) |>
  filter(CATEGORIE!="PRODUITS MANUFACTURES") |>
  mutate(MoisAn=as.yearmon(DATE),
         QuarterAn=as.yearqtr(DATE),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         ) |>
  group_by(ANNEE,QuarterAn,`SOUS-CATEGORIE`) |> 
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE)) |> 
  mutate(Rank=min_rank(VarMoy)) |>
  filter(Rank==1)|> 
  ungroup() |>
  distinct(QuarterAn,.keep_all=TRUE)

ranKTable <- left_join(SemestreTable,indicateur |> select(QuarterAn,`SOUS-CATEGORIE`),
          join_by(Quarter==QuarterAn),
          keep = FALSE)

```

```{r}
priceGlobCleanFull |>
  # filter(ANNEE==2020) |>
  filter(CATEGORIE!="PRODUITS MANUFACTURES") |>
  mutate(MoisAn=as.yearmon(DATE),
         QuarterAn=as.yearqtr(DATE),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         ) |>
  group_by(ANNEE,MOIS) |> 
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE)) |> 
  select("VarMoyAbs")

```
```{r}
priceGlobCleanFull |>
  # filter(ANNEE==2020) |>
  mutate(MoisAn=as.yearmon(DATE),
         QuarterAn=as.yearqtr(DATE),
         TauxVar=round((PRIX-PRIXPREC)/PRIXPREC,2),
         
         ) |>
  group_by(DATE) |> 
  summarise(PrixMoy=mean(PRIX,na.rm = TRUE),
            VarMoy=mean(TauxVar,na.rm =TRUE),
            VarMoyAbs=mean(abs(TauxVar),na.rm =TRUE)) |> 
  select(DATE,PrixMoy) |> 
  ggplot(aes(x = DATE, y = PrixMoy)) +
  geom_area(fill = "lightblue", alpha = 0.5) +
  theme_minimal() +
  labs(
       x = "Date",
       y = "Prix Moyen") 
  # scale_x_date(date_breaks = "6 months", date_labels = "%b %Y") +
  # theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
