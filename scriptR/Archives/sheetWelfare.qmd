---
title: "Broullion Welfare"
format: html
editor: visual
---

Fonction permettant d'affecter les valeurs d'une liste selon la proximité des villes. Nous avons ici 4 villes:

```{r}
# Ajout d'un identifant pour les colonnes 
priceGlob |> mutate(IDENTIFIANT=str_c("ENR",1:dim(priceGlob)[1]))
priceGlob |> 
  pivot_wider(names_from = VILLE,values_from =PRIX) |>
  slice(6) |>
  select(MAN) |> 
  pluck(1,1)

priceGlob |>
  pivot_wider(names_from = VILLE,values_from =PRIX,values_fn = ~first(.x)) |>
  rowwise(PRODUITS) |> 
  select(c(PRODUITS,ABIDJAN:KORHOGO))

priceGlob |> filter(MOIS=="janvier",
                    DATE==mdy("1/6/2020"),
                    CATEGORIE=="PRODUITS VIVRIERS",
                    `SOUS-CATEGORIE`=="PRODUITS DE SAISON",
                    PRODUITS=="citron (kg)",
                    VILLE=="ABIDJAN")
priceGlob |> dim()

priceGlob 
```

```{r,warning=FALSE}
for (i in 1:dim(priceGlob)) {
  
}

# Imputation d'une liste d'éléments
NomVille <- c("ABIDJAN","SANPEDRO", "BOUAKE", "YAMOUSSOUKRO", "MAN","KORHOGO")

which(NomVille==c("BOUAKE", "YAMOUSSOUKRO"))

vecTest1 <- c(800,NA,500,NA,NA,NA)

# Récupération des villes aux valeurs non manquantes
which(!is.na(vecTest1)) # Position

vecTest1[which(!is.na(vecTest1))]

vecTest1[which(is.na(vecTest1))]

# Fonction qui rammène la plus proche d'un ensemble de ville

villeProche <- function(ville,VilleDispo,MatriceDistance){
  
  NomVille <- c("ABIDJAN","SANPEDRO", "BOUAKE", "YAMOUSSOUKRO", "MAN","KORHOGO")
  
  # Récupération des villes aux valeurs non manquantes
  VilleDispo <- NomVille[which(!is.na(VilleDispo))]
  
  # Ordre des villes proches : Ordre relatif au nombre d'éléments
  ordreVilleProche <-  which(NomVille%in%VilleDispo)
  
  # Ordre de ville entrée
  ordreVille<- which(NomVille==ville)
  
  # Récupération du nom de la ville la plus proche
  
  ## Vecteur distance de la ville entrée en paramètre
   vecteurDistance <- MatriceDistance|> apply(2 ,order)|> as_tibble() |> pluck(ordreVille)
  
  ## Ordre la ville la plus proche
  ordreVilleProche <- ordreVilleProche |>
    map_dbl(~which(vecteurDistance==.x)) |>
    which.min() 
  
  ## Nom de la ville la plus proche
  NomVilleProche<- NomVille[ordreVille[ordreVilleProche]]
  
  return(ordreVilleProche)
}

villeProche("KORHOGO",c(800,NA,500,NA,NA,NA),DD)


## Test de proximité
vec <- DD |> apply(2 ,order)|> as_tibble() |> pluck(2)
vec

c(2,6) |> map_dbl(~which(vec==.x)) |> which.min()

which(c("ABIDJAN","SANPEDRO", "BOUAKE", "YAMOUSSOUKRO", "MAN","KORHOGO")%in%c("KORHOGO","BOUAKE"))

priceGlob |> unique()

```
